{"version":3,"sources":["components/Stats/StatsComponent.js","api.js","components/Stats/StatsAPI.js","components/Stats/StatsContainer.js","App.js","serviceWorker.js","index.js"],"names":["pieChartOptions","options","maintainAspectRatio","legend","display","color","position","labels","fontColor","fontSize","fontWeight","StatsComponent","props","className","statsTopic","data","world","width","height","worldStats","total_cases","active_cases","total_recovered","total_deaths","new_cases","new_deaths","serious_critical","total_cases_per_1m_population","total_cases_per1m","APISettings","baseUrl","headerParameters","headers","coronaStatus","getWorldData","getCountryData","getCountryList","coronaApiUrl","coronaHeaders","statsObj","requesturl","axios","get","countryName","StatsContainer","state","countryList","country","worldChartData","datasets","backgroundColor","countryChartData","getWorldCoronaStats","bind","assignStateValues","Container","Row","Col","xs","md","lg","this","getCoronaAffectedCountryList","str","replace","Number","statsArray","worldPieChart","push","convertStringToNumber","pieChartData","createDataArray","setState","previousState","getWorldUpdate","then","response","getCountryCoronaStats","catch","error","console","log","getDataByCountryName","latest_stat_by_country","filtered","affected_countries","filter","el","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fbcb989c.chunk.js","sourcesContent":["import React from 'react'\r\nimport './StatsComponent.scss'\r\nimport { Pie } from 'react-chartjs-2'\r\n// import { geolocated } from 'react-geolocated'\r\n\r\nconst pieChartOptions = {\r\n    options: {\r\n        maintainAspectRatio: false\r\n    },\r\n    legend: {\r\n        display: true,\r\n        color: '#fff',\r\n        position: 'bottom',\r\n        labels: {\r\n            fontColor: '#fff',\r\n            fontSize: 14,\r\n            fontWeight: 'bold'\r\n        }\r\n    }\r\n}\r\n\r\nfunction StatsComponent(props) {\r\n    return (\r\n        <div className=\"stats-component\">\r\n            <div className=\"title-div\">\r\n                {props.statsTopic} Statistics\r\n            </div>\r\n            <div className=\"graph-div\">\r\n                <Pie data={props.world} legend={pieChartOptions.legend} width={300} height={300} options={pieChartOptions.options} />\r\n            </div>\r\n            <div className=\"overall-stats\">\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Total Cases:</th>\r\n                            <th>Active:</th>\r\n                            <th>Recovered:</th>\r\n                            <th>Deaths:</th> \r\n                        </tr>\r\n                        <tr>\r\n                            <td>{props.worldStats.total_cases}</td>\r\n                            <td>{props.worldStats.active_cases}</td>\r\n                            <td>{props.worldStats.total_recovered}</td>\r\n                            <td>{props.worldStats.total_deaths}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div className=\"new-stats\">\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>New Cases:</th>\r\n                            <th>New Deaths:</th>\r\n                            <th>Critical:</th>\r\n                            <th>Cases per million:</th> \r\n                        </tr>\r\n                        <tr>\r\n                            <td>{props.worldStats.new_cases}</td>\r\n                            <td>{props.worldStats.new_deaths}</td>\r\n                            <td>{props.worldStats.serious_critical}</td>\r\n                            <td>\r\n                                {(props.statsTopic === 'World') ? \r\n                                    props.worldStats.total_cases_per_1m_population : \r\n                                    props.worldStats.total_cases_per1m \r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatsComponent","export const APISettings = {\r\n    coronaVirus: {\r\n        baseUrl: 'https://coronavirus-monitor.p.rapidapi.com/coronavirus/',\r\n        headerParameters: {\r\n            headers: {\r\n                \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n                \"x-rapidapi-key\" : \"188aae29ccmsh760576013171a02p149d6djsnf9834a9451ef\"\r\n            }\r\n        },\r\n        coronaStatus: {\r\n            getWorldData: 'worldstat.php',\r\n            getCountryData: 'latest_stat_by_country.php',\r\n            getCountryList: 'affected.php'\r\n        }\r\n    }\r\n}","import axios from 'axios'\r\nimport { APISettings } from '../../api'\r\nconst coronaApiUrl = APISettings.coronaVirus.baseUrl\r\nconst coronaHeaders = APISettings.coronaVirus.headerParameters\r\n\r\nclass StatsAPI {\r\n\r\n    getWorldUpdate() {\r\n        var requesturl = coronaApiUrl + APISettings.coronaVirus.coronaStatus.getWorldData\r\n        return axios.get(requesturl,coronaHeaders)\r\n    }\r\n\r\n    getDataByCountryName(countryName) {\r\n        var requesturl = coronaApiUrl + APISettings.coronaVirus.coronaStatus.getCountryData+ '?country=' +countryName\r\n        return axios.get(requesturl,coronaHeaders)\r\n    }\r\n\r\n    getCountryList() {\r\n        var requesturl = coronaApiUrl + APISettings.coronaVirus.coronaStatus.getCountryList\r\n        return axios.get(requesturl,coronaHeaders)\r\n    }\r\n\r\n}\r\n\r\nexport default StatsAPI","import React from 'react'\r\n// import { geolocated } from \"react-geolocated\";\r\nimport {Container, Row, Col} from 'react-bootstrap'\r\nimport StatsComponent from './StatsComponent'\r\nimport StatsAPI from './StatsAPI'\r\nconst statsObj = new StatsAPI()\r\n\r\nclass StatsContainer extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            countryList: [],\r\n            world : {\r\n                total_cases: '',\r\n                active_cases: '',\r\n                total_deaths: '',\r\n                total_recovered: '',\r\n                new_cases: '',\r\n                new_deaths: '',\r\n                serious_critical: '',\r\n                total_cases_per_1m_population: ''\r\n            },\r\n            countryName: 'India',\r\n            country: {\r\n                total_cases: '',\r\n                active_cases: '',\r\n                total_deaths: '',\r\n                total_recovered: '',\r\n                new_cases: '',\r\n                new_deaths: '',\r\n                serious_critical: '',\r\n                total_cases_per1m: ''\r\n            },\r\n            worldChartData: {\r\n                datasets: [\r\n                    {\r\n                        data: [],\r\n                        backgroundColor: ['#007bff', '#28a745', '#dc3545']\r\n                    }\r\n                ],\r\n                labels: ['Active','Recovered','Death']\r\n            },\r\n            countryChartData: {\r\n                datasets: [\r\n                    {\r\n                        data: [],\r\n                        backgroundColor: ['#007bff', '#28a745', '#dc3545']\r\n                    }\r\n                ],\r\n                labels: ['Active','Recovered','Death']\r\n            }\r\n        }\r\n        this.getWorldCoronaStats = this.getWorldCoronaStats.bind(this)\r\n        this.assignStateValues = this.assignStateValues.bind(this)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"covid-status\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs={12} md={6} lg={6}>\r\n                            <StatsComponent statsTopic='World' worldStats={this.state.world} world={this.state.worldChartData} />\r\n                        </Col>\r\n                        <Col md={6} xs={12} lg={6}>\r\n                            <StatsComponent statsTopic={this.state.countryName} worldStats={this.state.country} world={this.state.countryChartData} />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCoronaAffectedCountryList()\r\n    }\r\n\r\n    convertStringToNumber(str) {\r\n        str = str.replace(/\\,/g,'')\r\n        str = Number(str)\r\n        return str\r\n    }\r\n\r\n    createDataArray(statsArray) {\r\n        var worldPieChart = []\r\n        worldPieChart.push(this.convertStringToNumber(statsArray.active_cases))\r\n        worldPieChart.push(this.convertStringToNumber(statsArray.total_recovered))\r\n        worldPieChart.push(this.convertStringToNumber(statsArray.total_deaths))\r\n        return worldPieChart\r\n    }\r\n\r\n    assignStateValues(str='world',data) {\r\n        if(str === 'world') {\r\n            var pieChartData = this.createDataArray(data)\r\n            this.setState((previousState) => {\r\n                return {\r\n                    ...previousState,\r\n                    world: data,\r\n                    worldChartData: {\r\n                        ...previousState.worldChartData.labels,\r\n                        datasets: [{\r\n                            ...previousState.worldChartData.datasets[0].backgroundColor,\r\n                            data: pieChartData,\r\n                        }]\r\n                    }\r\n                }\r\n            })\r\n        } else if (str === 'list') {\r\n            this.setState((previousState) => {\r\n                return {\r\n                    ...previousState,\r\n                    countryList: data\r\n                }\r\n            })\r\n        } else {\r\n            this.setState((previousState) => {\r\n                var pieChartData = this.createDataArray(data)\r\n                return {\r\n                    ...previousState,\r\n                    country: data,\r\n                    countryChartData: {\r\n                        ...previousState.countryChartData.labels,\r\n                        datasets: [{\r\n                            ...previousState.countryChartData.datasets[0].backgroundColor,\r\n                            data: pieChartData,\r\n                        }]\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    getWorldCoronaStats() {\r\n        statsObj.getWorldUpdate()\r\n            .then((response) => {\r\n                this.assignStateValues('world', response.data)\r\n                this.getCountryCoronaStats(this.state.countryName)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    getCountryCoronaStats(countryName) {\r\n        statsObj.getDataByCountryName(countryName)\r\n            .then((response) => {\r\n                this.assignStateValues(countryName, response.data.latest_stat_by_country[0])\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    getCoronaAffectedCountryList() {\r\n        statsObj.getCountryList()\r\n            .then((response) => {\r\n                var filtered = response.data.affected_countries.filter((el) => el !== '')\r\n                this.assignStateValues('list',filtered)\r\n                this.getWorldCoronaStats()\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n}\r\n\r\n// export default geolocated({\r\n//     positionOptions: {\r\n//         enableHighAccuracy: false,\r\n//     },\r\n//     userDecisionTimeout: 5000,\r\n// })(StatsContainer);\r\n\r\nexport default StatsContainer","import React from 'react'\nimport './App.css'\n\n// Custom Components\nimport Stats from './components/Stats/StatsContainer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Stats />\n    </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}