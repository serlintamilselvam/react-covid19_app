{"version":3,"sources":["components/Stats/StatsComponent.js","api.js","components/Stats/StatsAPI.js","components/Stats/StatsContainer.js","App.js","serviceWorker.js","index.js"],"names":["pieChartOptions","options","maintainAspectRatio","legend","display","color","position","labels","fontColor","fontSize","fontWeight","FlagComponent","props","className","src","flag","alt","name","HistoryComponent","oldStats","total_cases","active_cases","total_recovered","total_deaths","NewStatsComponent","newStats","new_cases","new_deaths","serious_critical","isWorldStats","total_cases_per_1m_population","total_cases_per1m","StatsComponent","countryStats","data","world","width","height","worldStats","APISettings","headers","baseUrl","coronaStatus","getWorldData","getCountryData","getCountryList","coronaApiUrl","iSBCodeUrl","statsObj","requesturl","axios","get","countryName","ChartContainer","Container","Row","Col","xs","md","lg","graphData","worldChartData","countryDetails","country","countryChartData","StatsContainer","state","isLoaded","countryList","defaultCountry","datasets","backgroundColor","getWorldCoronaStats","bind","assignStateValues","this","getCoronaAffectedCountryList","str","replace","Number","statsArray","worldPieChart","push","convertStringToNumber","find","element","pieChartData","createDataArray","setState","previousState","foundCounrty","countyDetailsFromJSON","getWorldUpdate","then","response","getCountryCoronaStats","catch","error","console","log","getDataByCountryName","latest_stat_by_country","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9aeef283.chunk.js","sourcesContent":["import React from 'react'\r\nimport './StatsComponent.scss'\r\nimport { Pie } from 'react-chartjs-2'\r\n// import { geolocated } from 'react-geolocated'\r\n\r\nconst pieChartOptions = {\r\n    options: {\r\n        maintainAspectRatio: false\r\n    },\r\n    legend: {\r\n        display: true,\r\n        color: '#fff',\r\n        position: 'bottom',\r\n        labels: {\r\n            fontColor: '#fff',\r\n            fontSize: 14,\r\n            fontWeight: 'bold'\r\n        }\r\n    }\r\n}\r\n\r\nfunction FlagComponent(props) {\r\n    return (\r\n        <div className=\"flag-wrapper\">\r\n            <img className=\"country-flag\" src={props.flag.flag} alt={props.flag.name} /> {props.flag.name} Statistics\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction HistoryComponent(props) {\r\n    return (\r\n        <div className=\"overall-stats\">\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Total Cases:</th>\r\n                        <th>Active:</th>\r\n                        <th>Recovered:</th>\r\n                        <th>Deaths:</th> \r\n                    </tr>\r\n                    <tr>\r\n                        <td>{props.oldStats.total_cases}</td>\r\n                        <td>{props.oldStats.active_cases}</td>\r\n                        <td>{props.oldStats.total_recovered}</td>\r\n                        <td>{props.oldStats.total_deaths}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction NewStatsComponent(props) {\r\n    return (\r\n        <div className=\"new-stats\">\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <th>New Cases:</th>\r\n                        <th>New Deaths:</th>\r\n                        <th>Critical:</th>\r\n                        <th>Cases per million:</th> \r\n                    </tr>\r\n                    <tr>\r\n                        <td>{props.newStats.new_cases}</td>\r\n                        <td>{props.newStats.new_deaths}</td>\r\n                        <td>{props.newStats.serious_critical}</td>\r\n                        <td>\r\n                            {(props.isWorldStats) ? \r\n                                props.newStats.total_cases_per_1m_population : \r\n                                props.newStats.total_cases_per1m \r\n                            }\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction StatsComponent(props) {\r\n    return (\r\n        <div className=\"stats-component\">\r\n            <div className=\"title-div\">\r\n                {(props.isWorldStats) ? \r\n                    'World Statistics': \r\n                    <FlagComponent flag={props.countryStats} />\r\n                }\r\n            </div>\r\n            <div className=\"graph-div\">\r\n                <Pie data={props.world} legend={pieChartOptions.legend} width={300} height={300} options={pieChartOptions.options} />\r\n            </div>\r\n            <HistoryComponent oldStats={props.worldStats} />\r\n            <NewStatsComponent newStats={props.worldStats} isWorldStats={props.isWorldStats} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatsComponent","export const APISettings = {\r\n    headerParameters: {\r\n        headers: {\r\n            \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n            \"x-rapidapi-key\" : \"188aae29ccmsh760576013171a02p149d6djsnf9834a9451ef\"\r\n        }\r\n    },\r\n    coronaVirus: {\r\n        baseUrl: 'https://coronavirus-monitor.p.rapidapi.com/coronavirus/',\r\n        coronaStatus: {\r\n            getWorldData: 'worldstat.php',\r\n            getCountryData: 'latest_stat_by_iso_alpha_3.php',\r\n            getCountryList: 'affected.php'\r\n        }\r\n    },\r\n    countryCode: {\r\n        baseUrl: 'https://restcountries.eu/rest/v2/all'\r\n    }\r\n}","import axios from 'axios'\r\nimport { APISettings } from '../../api'\r\nconst coronaApiUrl = APISettings.coronaVirus.baseUrl\r\nconst headers = APISettings.headerParameters\r\nconst iSBCodeUrl = APISettings.countryCode.baseUrl\r\n\r\nclass StatsAPI {\r\n\r\n    getWorldUpdate() {\r\n        var requesturl = coronaApiUrl + APISettings.coronaVirus.coronaStatus.getWorldData\r\n        return axios.get(requesturl,headers)\r\n    }\r\n\r\n    getDataByCountryName(countryName) {\r\n        var requesturl = coronaApiUrl + APISettings.coronaVirus.coronaStatus.getCountryData+ '?alpha3=' +countryName\r\n        return axios.get(requesturl,headers)\r\n    }\r\n\r\n    getCountryList() {\r\n        return axios.get(iSBCodeUrl)\r\n    }\r\n\r\n}\r\n\r\nexport default StatsAPI","import React from 'react'\r\n// import { geolocated } from \"react-geolocated\";\r\nimport RiseLoader from 'react-spinners/RiseLoader'\r\nimport {Container, Row, Col} from 'react-bootstrap'\r\nimport StatsComponent from './StatsComponent'\r\nimport StatsAPI from './StatsAPI'\r\nconst statsObj = new StatsAPI()\r\n\r\nfunction OverLayLoader(props) {\r\n    return (\r\n        <div className=\"overlay-loader\">\r\n            <div className=\"loader-wrapper\">\r\n                <RiseLoader\r\n                    size={30}\r\n                    color={\"#24B997\"}\r\n                    loading={props.loading}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction ChartContainer(props) {\r\n    return (\r\n        <div className=\"chart-container\">\r\n            <Container>\r\n                <Row>\r\n                    <Col xs={12} md={6} lg={6}>\r\n                        <StatsComponent \r\n                            isWorldStats={true} \r\n                            worldStats={props.graphData.world} \r\n                            world={props.graphData.worldChartData} \r\n                        />\r\n                    </Col>\r\n                    <Col md={6} xs={12} lg={6}>\r\n                        <StatsComponent \r\n                            isWorldStats={false} \r\n                            countryStats={props.graphData.countryDetails} \r\n                            worldStats={props.graphData.country} \r\n                            world={props.graphData.countryChartData} \r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nclass StatsContainer extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            isLoaded: false,\r\n            countryList: [],\r\n            defaultCountry: 'India',\r\n            world : {\r\n                total_cases: '',\r\n                active_cases: '',\r\n                total_deaths: '',\r\n                total_recovered: '',\r\n                new_cases: '',\r\n                new_deaths: '',\r\n                serious_critical: '',\r\n                total_cases_per_1m_population: ''\r\n            },\r\n            countryDetails: {},\r\n            countryName: 'IN',\r\n            country: {\r\n                total_cases: '',\r\n                active_cases: '',\r\n                total_deaths: '',\r\n                total_recovered: '',\r\n                new_cases: '',\r\n                new_deaths: '',\r\n                serious_critical: '',\r\n                total_cases_per1m: ''\r\n            },\r\n            worldChartData: {\r\n                datasets: [\r\n                    {\r\n                        data: [],\r\n                        backgroundColor: ['#007bff', '#28a745', '#dc3545']\r\n                    }\r\n                ],\r\n                labels: ['Active','Recovered','Death']\r\n            },\r\n            countryChartData: {\r\n                datasets: [\r\n                    {\r\n                        data: [],\r\n                        backgroundColor: ['#007bff', '#28a745', '#dc3545']\r\n                    }\r\n                ],\r\n                labels: ['Active','Recovered','Death']\r\n            }\r\n        }\r\n        this.getWorldCoronaStats = this.getWorldCoronaStats.bind(this)\r\n        this.assignStateValues = this.assignStateValues.bind(this)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"covid-status\">\r\n                {/* <OverLayLoader loading={!this.state.isLoaded} /> */}\r\n                <ChartContainer graphData={this.state} />\r\n                {/* {(this.state.isLoaded) ? <ChartContainer graphData={this.state} /> : \"\" } */}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCoronaAffectedCountryList()\r\n    }\r\n\r\n    convertStringToNumber(str) {\r\n        str = str.replace(/\\,/g,'')\r\n        str = Number(str)\r\n        return str\r\n    }\r\n\r\n    createDataArray(statsArray) {\r\n        var worldPieChart = []\r\n        worldPieChart.push(this.convertStringToNumber(statsArray.active_cases))\r\n        worldPieChart.push(this.convertStringToNumber(statsArray.total_recovered))\r\n        worldPieChart.push(this.convertStringToNumber(statsArray.total_deaths))\r\n        return worldPieChart\r\n    }\r\n\r\n    countyDetailsFromJSON(countryList,countryName) {\r\n        return countryList.find(element => element.name === countryName)\r\n    }\r\n\r\n    assignStateValues(str='world',data) {\r\n        if(str === 'world') {\r\n            var pieChartData = this.createDataArray(data)\r\n            this.setState((previousState) => {\r\n                return {\r\n                    ...previousState,\r\n                    world: data,\r\n                    worldChartData: {\r\n                        ...previousState.worldChartData.labels,\r\n                        datasets: [{\r\n                            ...previousState.worldChartData.datasets[0].backgroundColor,\r\n                            data: pieChartData,\r\n                        }]\r\n                    }\r\n                }\r\n            })\r\n        } else if (str === 'list') {\r\n\r\n            var foundCounrty = this.countyDetailsFromJSON(data,this.state.defaultCountry)\r\n            this.setState((previousState) => {\r\n                return {\r\n                    ...previousState,\r\n                    countryDetails: foundCounrty,\r\n                    countryList: data\r\n                }\r\n            })\r\n        } else {\r\n            this.setState((previousState) => {\r\n                var pieChartData = this.createDataArray(data)\r\n                return {\r\n                    ...previousState,\r\n                    isLoaded: true,\r\n                    country: data,\r\n                    countryChartData: {\r\n                        ...previousState.countryChartData.labels,\r\n                        datasets: [{\r\n                            ...previousState.countryChartData.datasets[0].backgroundColor,\r\n                            data: pieChartData,\r\n                        }]\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    getWorldCoronaStats() {\r\n        statsObj.getWorldUpdate()\r\n            .then((response) => {\r\n                this.assignStateValues('world', response.data)\r\n                this.getCountryCoronaStats(this.state.countryDetails.name)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    getCountryCoronaStats(countryName) {\r\n        statsObj.getDataByCountryName(countryName)\r\n            .then((response) => {\r\n                this.assignStateValues(countryName, response.data.latest_stat_by_country[0])\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    getCoronaAffectedCountryList() {\r\n        statsObj.getCountryList()\r\n            .then((response) => {\r\n                this.assignStateValues('list',response.data)\r\n                this.getWorldCoronaStats()\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n}\r\n\r\n// export default geolocated({\r\n//     positionOptions: {\r\n//         enableHighAccuracy: false,\r\n//     },\r\n//     userDecisionTimeout: 5000,\r\n// })(StatsContainer);\r\n\r\nexport default StatsContainer","import React from 'react'\nimport './App.css'\n\n// Custom Components\nimport Stats from './components/Stats/StatsContainer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Stats />\n    </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}