{"version":3,"sources":["components/Stats/StatsComponent.js","components/CountrySelect/CountrySelect.js","components/AwarenessCarousel/AwarenessCarousel.js","api.js","components/Stats/StatsAPI.js","components/Stats/StatsContainer.js","components/Header/Header.js","App.js","serviceWorker.js","index.js","images/1.png","images/2.png","images/3.png","images/4.png"],"names":["pieChartOptions","options","maintainAspectRatio","legend","display","color","position","labels","fontColor","fontSize","fontWeight","FlagComponent","props","className","src","flag","alt","name","HistoryComponent","oldStats","total_cases","active_cases","total_recovered","total_deaths","NewStatsComponent","newStats","new_cases","new_deaths","serious_critical","isWorldStats","total_cases_per_1m_population","total_cases_per1m","StatsComponent","countryStats","data","world","width","height","worldStats","CountrySelect","handleChange","selectedOption","setState","handleChangeEvent","value","state","label","bind","countryOptions","this","optionValues","forEach","country","push","alpha3Code","generateCountryOptions","onChange","React","Component","AwarenessCarousel","Carousel","Item","washyourhands1","washyourhands2","washyourhands3","washyourhands4","APISettings","headers","baseUrl","coronaStatus","getWorldData","getCountryData","getCountryList","coronaApiUrl","iSBCodeUrl","StatsAPI","requesturl","axios","get","countryName","statsObj","ChartContainer","Container","Row","Col","xs","md","lg","graphData","worldChartData","countryDetails","countryChartData","countryList","length","statistic_taken_at","href","StatsContainer","isLoaded","defaultCountry","datasets","backgroundColor","getWorldCoronaStats","assignStateValues","getCoronaAffectedCountryList","str","replace","Number","statsArray","worldPieChart","convertStringToNumber","defaultCountryName","find","element","pieChartData","createDataArray","previousState","foundCountry","countryDetailsFromJSON","returnedJSON","getCountryCoronaStats","getWorldUpdate","then","response","catch","error","console","log","getDataByCountryName","latest_stat_by_country","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.84a2e816.chunk.js","sourcesContent":["import React from 'react'\nimport './StatsComponent.scss'\nimport { Pie } from 'react-chartjs-2'\n// import { geolocated } from 'react-geolocated'\n\nconst pieChartOptions = {\n    options: {\n        maintainAspectRatio: false\n    },\n    legend: {\n        display: true,\n        color: '#fff',\n        position: 'bottom',\n        labels: {\n            fontColor: '#fff',\n            fontSize: 14,\n            fontWeight: 'bold'\n        }\n    }\n}\n\nfunction FlagComponent(props) {\n    return (\n        <div className=\"flag-wrapper\">\n            <img className=\"country-flag\" src={props.flag.flag} alt={props.flag.name} /> {props.flag.name} Statistics\n        </div>\n    )\n}\n\nfunction HistoryComponent(props) {\n    return (\n        <div className=\"overall-stats\">\n            <table>\n                <tbody>\n                    <tr>\n                        <th>Total Cases:</th>\n                        <th>Active:</th>\n                        <th>Recovered:</th>\n                        <th>Deaths:</th> \n                    </tr>\n                    <tr>\n                        <td>{props.oldStats.total_cases}</td>\n                        <td>{props.oldStats.active_cases}</td>\n                        <td>{props.oldStats.total_recovered}</td>\n                        <td>{props.oldStats.total_deaths}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nfunction NewStatsComponent(props) {\n    return (\n        <div className=\"new-stats\">\n            <table>\n                <tbody>\n                    <tr>\n                        <th>New Cases:</th>\n                        <th>New Deaths:</th>\n                        <th>Critical:</th>\n                        <th>Cases per million:</th> \n                    </tr>\n                    <tr>\n                        <td>{props.newStats.new_cases}</td>\n                        <td>{props.newStats.new_deaths}</td>\n                        <td>{props.newStats.serious_critical}</td>\n                        <td>\n                            {(props.isWorldStats) ? \n                                props.newStats.total_cases_per_1m_population : \n                                props.newStats.total_cases_per1m \n                            }\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nfunction StatsComponent(props) {\n    return (\n        <div className=\"stats-component\">\n            <div className=\"title-div\">\n                {(props.isWorldStats) ? \n                    'World Statistics': \n                    <FlagComponent flag={props.countryStats} />\n                }\n            </div>\n            <div className=\"graph-div\">\n                <Pie data={props.world} legend={pieChartOptions.legend} width={250} height={250} options={pieChartOptions.options} />\n            </div>\n            <HistoryComponent oldStats={props.worldStats} />\n            <NewStatsComponent newStats={props.worldStats} isWorldStats={props.isWorldStats} />\n        </div>\n    )\n}\n\nexport default StatsComponent","import React from 'react'\nimport './CountrySelect.scss'\nimport Select from 'react-select'\n\nclass CountrySelect extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            selectedOption: {\n                value: \"CAN\",\n                label: \"Canada\"\n            }\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n\n    }\n\n      handleChange = selectedOption => {\n        this.setState({ selectedOption })\n        this.props.handleChangeEvent(selectedOption.value)\n      }\n\n      generateCountryOptions() {\n          var countryOptions = []\n          this.props.optionValues.forEach(country => {\n            countryOptions.push({\n                value: country.alpha3Code,\n                label: country.name\n            })\n          })\n          return countryOptions\n      }\n\n      render() {\n\n        const countryOptions = this.generateCountryOptions()\n        // this.setIntialState()\n\n        return (\n            <div className=\"select-wrapper\">\n                <Select\n                    value={this.state.selectedOption}\n                    onChange={this.handleChange}\n                    options={countryOptions}\n                />\n            </div>\n        )\n      }\n\n}\n\nexport default CountrySelect","import React from 'react'\nimport { Carousel } from 'react-bootstrap'\nimport './AwarenessCarousel.scss'\nimport washyourhands1 from '../../images/1.png'\nimport washyourhands2 from '../../images/2.png'\nimport washyourhands3 from '../../images/3.png'\nimport washyourhands4 from '../../images/4.png'\n\nfunction AwarenessCarousel(props) {\n    return (\n        <div className=\"sub-heading-wrapper\">\n            <div className=\"sub-heading\">\n                Protect Protect yourself and others from getting sick\n            </div>\n            <div className=\"carousel-wrapper\">\n                <Carousel>\n                    <Carousel.Item>\n                        <img\n                            className=\"d-block w-100\"\n                            src={washyourhands1}\n                            alt=\"Corona Awareness\"\n                        />\n                    </Carousel.Item>\n                    <Carousel.Item>\n                        <img\n                            className=\"d-block w-100\"\n                            src={washyourhands2}\n                            alt=\"Corona Awareness\"\n                        />\n                    </Carousel.Item>\n                    <Carousel.Item>\n                        <img\n                            className=\"d-block w-100\"\n                            src={washyourhands3}\n                            alt=\"Corona Awareness\"\n                        />\n                    </Carousel.Item>\n                    <Carousel.Item>\n                        <img\n                            className=\"d-block w-100\"\n                            src={washyourhands4}\n                            alt=\"Corona Awareness\"\n                        />\n                    </Carousel.Item>\n                </Carousel>\n            </div>\n        </div>\n    )\n}\n\n\nexport default AwarenessCarousel","export const APISettings = {\n    headerParameters: {\n        headers: {\n            \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\n            \"x-rapidapi-key\" : \"188aae29ccmsh760576013171a02p149d6djsnf9834a9451ef\"\n        }\n    },\n    coronaVirus: {\n        baseUrl: 'https://coronavirus-monitor.p.rapidapi.com/coronavirus/',\n        coronaStatus: {\n            getWorldData: 'worldstat.php',\n            getCountryData: 'latest_stat_by_iso_alpha_3.php',\n            getCountryList: 'affected.php'\n        }\n    },\n    countryCode: {\n        baseUrl: 'https://restcountries.eu/rest/v2/all'\n    }\n}","import axios from 'axios'\nimport { APISettings } from '../../api'\nconst coronaApiUrl = APISettings.coronaVirus.baseUrl\nconst headers = APISettings.headerParameters\nconst iSBCodeUrl = APISettings.countryCode.baseUrl\n\nclass StatsAPI {\n\n    getWorldUpdate() {\n        var requesturl = coronaApiUrl + APISettings.coronaVirus.coronaStatus.getWorldData\n        return axios.get(requesturl,headers)\n    }\n\n    getDataByCountryName(countryName) {\n        var requesturl = coronaApiUrl + APISettings.coronaVirus.coronaStatus.getCountryData+ '?alpha3=' +countryName\n        return axios.get(requesturl,headers)\n    }\n\n    getCountryList() {\n        return axios.get(iSBCodeUrl)\n    }\n\n}\n\nexport default StatsAPI","import React from 'react'\nimport {Container, Row, Col} from 'react-bootstrap'\nimport StatsComponent from './StatsComponent'\nimport CountrySelect from '../CountrySelect/CountrySelect'\nimport AwarenessCarousel from '../AwarenessCarousel/AwarenessCarousel'\nimport StatsAPI from './StatsAPI'\nimport './StatsContainer.scss'\nconst statsObj = new StatsAPI()\n\n\nclass ChartContainer extends React.Component {\n\n    constructor() {\n        super()\n        this.handleChangeEvent = this.handleChangeEvent.bind(this)\n    }\n\n\n    handleChangeEvent(alpha3Code) {\n        this.props.handleChangeEvent(alpha3Code)\n    }\n\n    render() {\n        return (\n            <div className=\"chart-container\">\n                <Container>\n                    <Row>\n                        <Col xs={12} md={6} lg={6}>\n                            <StatsComponent \n                                isWorldStats={true} \n                                worldStats={this.props.graphData.world} \n                                world={this.props.graphData.worldChartData} \n                            />\n                        </Col>\n                        <Col md={6} xs={12} lg={6} className=\"country-chart\">\n                            <StatsComponent \n                                isWorldStats={false} \n                                countryStats={this.props.graphData.countryDetails} \n                                worldStats={this.props.graphData.country} \n                                world={this.props.graphData.countryChartData} \n                            />\n                            { (this.props.graphData.countryList.length) ? \n                                <CountrySelect handleChangeEvent={this.handleChangeEvent} optionValues={this.props.graphData.countryList} /> : \n                                '' \n                            }\n                        </Col>\n                    </Row>\n                </Container>\n                <AwarenessCarousel />\n                <div className=\"stats-taken-time\">\n                    <div className=\"api-updated-time\">\n                        <b>Stats taken at:</b> {this.props.graphData.world.statistic_taken_at} IST\n                    </div>\n                    <div className=\"api-credits\">\n                        <b>Data Credits: </b> \n                            <a href=\"https://rapidapi.com/astsiatsko/api/coronavirus-monitor\">Coronavirus monitor by astsiatsko</a>\n                    </div>\n                </div>\n            </div>\n    \n        )\n    }\n}\n\n\nclass StatsContainer extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            isLoaded: false,\n            countryList: [],\n            defaultCountry: 'Canada',\n            world : {\n                total_cases: '',\n                active_cases: '',\n                total_deaths: '',\n                total_recovered: '',\n                new_cases: '',\n                new_deaths: '',\n                serious_critical: '',\n                total_cases_per_1m_population: ''\n            },\n            countryDetails: {},\n            country: {\n                total_cases: '',\n                active_cases: '',\n                total_deaths: '',\n                total_recovered: '',\n                new_cases: '',\n                new_deaths: '',\n                serious_critical: '',\n                total_cases_per1m: ''\n            },\n            worldChartData: {\n                datasets: [\n                    {\n                        data: [],\n                        backgroundColor: ['#007bff', '#28a745', '#dc3545']\n                    }\n                ],\n                labels: ['Active','Recovered','Death']\n            },\n            countryChartData: {\n                datasets: [\n                    {\n                        data: [],\n                        backgroundColor: ['#007bff', '#28a745', '#dc3545']\n                    }\n                ],\n                labels: ['Active','Recovered','Death']\n            }\n        }\n        this.getWorldCoronaStats = this.getWorldCoronaStats.bind(this)\n        this.assignStateValues = this.assignStateValues.bind(this)\n        this.handleChangeEvent = this.handleChangeEvent.bind(this)\n    }\n\n    render() {\n        return (\n            <div className=\"covid-status\">\n                <ChartContainer handleChangeEvent={this.handleChangeEvent} graphData={this.state} />\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        this.getCoronaAffectedCountryList()\n    }\n\n    convertStringToNumber(str) {\n        str = str.replace(/\\,/g,'')\n        str = Number(str)\n        return str\n    }\n\n    createDataArray(statsArray) {\n        var worldPieChart = []\n        worldPieChart.push(this.convertStringToNumber(statsArray.active_cases))\n        worldPieChart.push(this.convertStringToNumber(statsArray.total_recovered))\n        worldPieChart.push(this.convertStringToNumber(statsArray.total_deaths))\n        return worldPieChart\n    }\n\n    countryDetailsFromJSON(countryList,defaultCountryName) {\n        return countryList.find(element => element.name === defaultCountryName)\n    }\n\n    assignStateValues(str='world',data) {\n        if(str === 'world') {\n            var pieChartData = this.createDataArray(data)\n            this.setState((previousState) => {\n                return {\n                    ...previousState,\n                    world: data,\n                    worldChartData: {\n                        ...previousState.worldChartData.labels,\n                        datasets: [{\n                            ...previousState.worldChartData.datasets[0].backgroundColor,\n                            data: pieChartData,\n                        }]\n                    }\n                }\n            })\n        } else if (str === 'list') {\n\n            var foundCountry = this.countryDetailsFromJSON(data,this.state.defaultCountry)\n            this.setState((previousState) => {\n                return {\n                    ...previousState,\n                    countryDetails: foundCountry,\n                    countryList: data\n                }\n            })\n        } else {\n            this.setState((previousState) => {\n                var pieChartData = this.createDataArray(data)\n                return {\n                    ...previousState,\n                    isLoaded: true,\n                    country: data,\n                    countryChartData: {\n                        ...previousState.countryChartData.labels,\n                        datasets: [{\n                            ...previousState.countryChartData.datasets[0].backgroundColor,\n                            data: pieChartData,\n                        }]\n                    }\n                }\n            })\n        }\n    }\n\n    handleChangeEvent(alpha3Code) {\n        const returnedJSON = this.state.countryList.find(element => element.alpha3Code === alpha3Code)\n        this.setState((previousState) => {\n            return {\n                ...previousState,\n                countryDetails: returnedJSON,\n                defaultCountry: returnedJSON.name\n            }\n        })\n        this.getCountryCoronaStats(alpha3Code)\n    }\n\n    getWorldCoronaStats() {\n        statsObj.getWorldUpdate()\n            .then((response) => {\n                this.assignStateValues('world', response.data)\n                this.getCountryCoronaStats(this.state.countryDetails.alpha3Code)\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n    }\n\n    getCountryCoronaStats(countryName) {\n        statsObj.getDataByCountryName(countryName)\n            .then((response) => {\n                this.assignStateValues(countryName, response.data.latest_stat_by_country[0])\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n    }\n\n    getCoronaAffectedCountryList() {\n        statsObj.getCountryList()\n            .then((response) => {\n                this.assignStateValues('list',response.data)\n                this.getWorldCoronaStats()\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n    }\n\n}\n\nexport default StatsContainer","import React from 'react'\nimport './Header.scss'\n\nfunction Header() {\n    return (\n        <div className=\"covid-header\">\n            <div className=\"title\">\n                Covid-19 Dashboard\n                <div className=\"under-line\"></div>\n            </div>\n        </div>\n    )\n}\n\nexport default Header","import React from 'react'\nimport './App.css'\n\n// Custom Components\nimport Stats from './components/Stats/StatsContainer'\nimport Header from './components/Header/Header'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <Stats />\n    </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/1.8f95c346.png\";","module.exports = __webpack_public_path__ + \"static/media/2.7bca717f.png\";","module.exports = __webpack_public_path__ + \"static/media/3.3fd044dc.png\";","module.exports = __webpack_public_path__ + \"static/media/4.00f14d54.png\";"],"sourceRoot":""}